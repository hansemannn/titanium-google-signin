/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.googlesignin

import android.os.CancellationSignal
import com.google.android.libraries.identity.googleid.GoogleIdTokenCredential
import org.appcelerator.kroll.KrollDict
import org.appcelerator.kroll.KrollModule
import org.appcelerator.kroll.annotations.Kroll
import org.appcelerator.kroll.annotations.Kroll.method
import org.appcelerator.kroll.annotations.Kroll.module
import org.appcelerator.kroll.common.Log
import org.appcelerator.kroll.common.TiMessenger
import org.appcelerator.titanium.TiApplication


@module(name = "Googlesignin", id = "ti.googlesignin")
class GooglesigninModule : KrollModule() {
    var cancellationSignal: CancellationSignal? = null

    companion object {
        const val LCAT = "TiGoogleSignIn"
        @Kroll.constant val LOGIN_TYPE_DIALOG = "LOGIN_TYPE_DIALOG"
        @Kroll.constant val LOGIN_TYPE_SHEET = "LOGIN_TYPE_SHEET"

        @Kroll.constant val ERROR_TYPE_UNKNOWN = "ERROR_TYPE_UNKNOWN"
        @Kroll.constant val ERROR_TYPE_NO_CREDENTIAL = "ERROR_TYPE_NO_CREDENTIAL"
        @Kroll.constant val ERROR_TYPE_TOKEN_PARSING = "ERROR_TYPE_TOKEN_PARSING"
        @Kroll.constant val ERROR_TYPE_INTERRUPTED = "ERROR_TYPE_INTERRUPTED"
        @Kroll.constant val ERROR_TYPE_CANCELLED = "ERROR_TYPE_CANCELLED"
    }

    @method
    fun initialize(opts: KrollDict) {
        if (!opts.containsKeyAndNotNull("clientID")) {
            Log.e(LCAT, "Missing required \"clientID\" property!")
            return
        }

        TiCredentialManager.apiKey = opts.getString("clientID")
    }

    @method
    fun cancel(): Boolean {
        cancellationSignal?.cancel()
        return cancellationSignal?.isCanceled ?: false
    }

    @method
    fun signIn(@Kroll.argument(optional = true)params: KrollDict?) {
        // Create cancellation signal here to pass further and to be controlled from JS side using this class itself.
        cancellationSignal = CancellationSignal()

        if (TiApplication.isUIThread()) {
            TiCredentialManager.googleSignIn(this, params)
        } else {
            TiMessenger.postOnMain {
                TiCredentialManager.googleSignIn(this, params)
            }
        }
    }

    @method
    fun signOut() {
        TiCredentialManager.signOut(this)
    }

    fun fireLogoutEvent(success: Boolean = false, error: String = "") {
        val result = KrollDict()
        result["error"] = error
        result["success"] = success
        fireEvent("logout", result)
    }

    fun fireLoginEvent(
        credential: GoogleIdTokenCredential? = null,
        cancelled: Boolean = false,
        errorType: String = ERROR_TYPE_UNKNOWN,
        error: Exception? = null)
    {
        val event = KrollDict()

        if (credential == null) {
            event["error"] = error?.localizedMessage ?: "Unknown error"
            event["errorType"] = errorType
        }

        event["cancelled"] = cancelled
        event["success"] = credential != null
        event["user"] = credential?.let { parseUserCredentials(it) }

        fireEvent("login", event)
    }

    private fun parseUserCredentials(googleIdTokenCredential: GoogleIdTokenCredential): KrollDict {
        val user = KrollDict()

        googleIdTokenCredential.let {
            val auth = KrollDict()
            auth["idToken"] = it.idToken

            val profile = KrollDict()
            profile["familyName"] = it.familyName ?: ""
            profile["givenName"] = it.givenName ?: ""
            profile["name"] = it.displayName ?: ""
            profile["displayName"] = it.displayName ?: ""
            profile["email"] = it.id
            profile["image"] = it.profilePictureUri?.toString() ?: ""

            user["profile"] = profile
            user["authentication"] = auth
        }

        return user
    }
}