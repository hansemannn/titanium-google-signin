/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.googlesignin;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiMessenger;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiActivityResultHandler;
import org.appcelerator.titanium.util.TiActivitySupport;

import android.app.Activity;
import android.content.Intent;

import com.google.android.gms.auth.api.signin.GoogleSignIn;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInClient;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.common.api.Scope;
import com.google.android.gms.tasks.Task;

import java.util.ArrayList;

@Kroll.module(name = "Googlesignin", id = "ti.googlesignin")
public class GooglesigninModule extends KrollModule {
	GoogleSignInClient mSignInClient;

	public static final String LCAT = "TiGoogleSignIn";
	private static final int RC_SIGN_IN = 9001;

	@Override
	public void onStart(Activity activity) {
		super.onStart(activity);

		GoogleSignInAccount account = GoogleSignIn.getLastSignedInAccount(TiApplication.getAppCurrentActivity());

		// Check if already logged in
		if (account != null) {
			fireLoginEvent(account);
		} else {
			mSignInClient.silentSignIn().addOnCompleteListener(TiApplication.getAppCurrentActivity(), task -> {
				if (task.isSuccessful()) {
					fireLoginEvent(task.getResult());
				}
			});
		}
	}

	@Kroll.method
	protected synchronized void initialize(KrollDict opts) {
        if (!opts.containsKeyAndNotNull("clientID")) {
        	Log.e(LCAT, "Missing required \"clientID\" property!");
        	return;
		}

		GoogleSignInOptions options = new GoogleSignInOptions.Builder(
				GoogleSignInOptions.DEFAULT_SIGN_IN)
				.requestIdToken(opts.getString("clientID"))
				.requestProfile()
				.requestEmail()
				.build();

		mSignInClient = GoogleSignIn.getClient(TiApplication.getAppCurrentActivity(), options);
	}

	@Kroll.getProperty
	protected boolean getLoggedIn() {
		return GoogleSignIn.getLastSignedInAccount(TiApplication.getAppCurrentActivity()) != null;
	}

	@Kroll.method
	protected synchronized void signIn() {
		// Building of intent
		Intent signInIntent = mSignInClient.getSignInIntent();

		// building new activity with result handler
		final TiActivitySupport activitySupport = (TiActivitySupport) TiApplication
				.getInstance().getCurrentActivity();

		if (TiApplication.isUIThread()) {
			activitySupport.launchActivityForResult(signInIntent, RC_SIGN_IN,
					new SignInResultHandler());
		} else {
			TiMessenger.postOnMain(() -> activitySupport.launchActivityForResult(signInIntent,
					RC_SIGN_IN, new SignInResultHandler()));
		}
	}

	@Kroll.method
	protected synchronized void signOut() {
		if (mSignInClient == null) {
			Log.e(LCAT, "googleApiClient does not exist");
			return;
		}

		mSignInClient.signOut().addOnCompleteListener(TiApplication.getAppCurrentActivity(), task -> {
			KrollDict kd = new KrollDict();
			fireEvent("disconnect", kd);
		});
	}

	private final class SignInResultHandler implements TiActivityResultHandler {
		public void onError(Activity arg0, int arg1, Exception e) {
		    Log.e(LCAT, e.getMessage());
		}

		public void onResult(Activity dummy, int requestCode, int resultCode, Intent data) {
			if (requestCode == RC_SIGN_IN) {
			    Log.d(LCAT, "processing sign-in with resultCode: " + resultCode);
				Task<GoogleSignInAccount> task = GoogleSignIn.getSignedInAccountFromIntent(data);

				if (task.isSuccessful()) {
					GoogleSignInAccount googleSignInAccount = task.getResult();
					fireLoginEvent(googleSignInAccount);
				} else if (task.isCanceled()) {
					fireCancelEvent();
				} else {
					fireErrorEvent(task.getException());
				}
			}
		}
	}

	private void fireCancelEvent() {
		KrollDict event = new KrollDict();

		event.put("cancelled", true);
		event.put("success", false);

		fireEvent("login", event);
	}

	private void fireErrorEvent(Exception exception) {
		KrollDict event = new KrollDict();

		event.put("message", exception != null ? exception.getLocalizedMessage() : "unknown exception");
		event.put("success", false);

		fireEvent("error", event);
	}

	private void fireLoginEvent(GoogleSignInAccount googleSignInAccount) {
		KrollDict event = new KrollDict();
		KrollDict user = new KrollDict();
		KrollDict profile = new KrollDict();
		KrollDict auth = new KrollDict();

		ArrayList<String> scopes = new ArrayList<>();

		for (Scope scope : googleSignInAccount.getGrantedScopes()) {
			scopes.add(scope.toString());
		}

		profile.put("familyName", googleSignInAccount.getFamilyName());
		profile.put("givenName", googleSignInAccount.getGivenName());
		profile.put("accountName", googleSignInAccount.getAccount().name);
		profile.put("name", googleSignInAccount.getDisplayName());
		profile.put("displayName", googleSignInAccount.getDisplayName());
		profile.put("email", googleSignInAccount.getEmail());
		profile.put("image", googleSignInAccount.getPhotoUrl().toString());
		profile.put("accountType", googleSignInAccount.getAccount().type);
		profile.put("accountString", googleSignInAccount.getAccount().toString());

		auth.put("idToken", googleSignInAccount.getIdToken());

		user.put("id", googleSignInAccount.getId());
		user.put("scopes", scopes.toArray(new String[0]));
		user.put("serverAuthCode", googleSignInAccount.getServerAuthCode());
		user.put("profile", profile);
		user.put("authentication", auth);

		event.put("user", user);
		event.put("cancelled", false);
		event.put("success", true);

		fireEvent("login", event);
	}
}
